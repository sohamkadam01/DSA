class Solution {
    Integer [] [] dp;
    public int minDistance(String word1, String word2) {
        int n = word1.length();
        int m = word2.length();
        dp = new Integer [n+1][m+1];
        return slove(word1, word2, 0, 0);
    }
    public int slove (String s1, String s2, int i, int j){
        if(j == s2.length()){
            return s1.length() - i;
        }
        else if(i == s1.length()){
            return s2.length() - j;
        }

        if(dp[i][j] != null) return dp[i][j];

        if(s1.charAt(i) == s2.charAt(j)){
            return dp[i][j] = slove (s1, s2, i+1, j+1);
        }

        int insert = 1 + slove (s1, s2, i, j+1);
        int delete = 1 + slove (s1, s2, i + 1, j);
        int replace = 1 + slove (s1, s2, i + 1, j + 1);
        return dp[i][j] = Math.min(insert, Math.min (delete, replace));
    }
}