class Solution {
    Boolean dp [][];
    public  boolean slove (int i, int j, String s){
        if(i>=j){
            return true;
        }

        if(dp[i][j] != null) return dp[i][j];

        if(s.charAt(i) == s.charAt(j)){
            return dp[i][j] = slove(i+1, j-1,s);
        }

        return dp[i][j] = false;
    }

    public String longestPalindrome(String s) {
        int str = 0;
        int n = s.length();
        dp = new Boolean[n+1][n+1];
        int maxLen = Integer.MIN_VALUE;
        for(int i = 0; i<s.length(); i++){
            for(int j = i; j<s.length(); j++){
                if(slove(i,j,s)){
                    if(j-i+1>maxLen){
                    str = i;
                    maxLen = j-i+1;
                 }
                }
            }
        }
        return s.substring(str, str + maxLen);


    }
}