class Solution {
    public int maxIncreasingSubarrays(List<Integer> nums) {
        int n = nums.size();
        
   
        int[] incLen = new int[n];
        incLen[n - 1] = 1;
        
        for (int i = n - 2; i >= 0; i--) {
            if (nums.get(i) < nums.get(i + 1)) {
                incLen[i] = incLen[i + 1] + 1;
            } else {
                incLen[i] = 1;
            }
        }
        
        int left = 1, right = n / 2;
        int maxK = 0;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (isPossible(nums, incLen, mid)) {
                maxK = mid;
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        
        return maxK;
    }
    
    private boolean isPossible(List<Integer> nums, int[] incLen, int k) {
        int n = nums.size();
        
        for (int i = 0; i <= n - 2 * k; i++) {
            if (incLen[i] >= k) {
                
                if (incLen[i + k] >= k) {
                    return true;
                }
            }
        }
        
        return false;
    }
}