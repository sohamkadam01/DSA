class Solution {
    private class Entry{
        int x = 0;
        int y = 0;
        int t = 0;
        Entry(int x, int y, int t){
            this.x = x;
            this.y = y;
            this.t = t;
        }
    }
    public int swimInWater(int[][] grid) {
        PriorityQueue <Entry> queue = new PriorityQueue <> ((a,b)->a.t-b.t);
        int direction [][] = {
            {-1,0}, // top
            {0,1},//right
            {1,0},//bottom
            {0,-1} // left
        };

        boolean visited [][] = new boolean [grid.length][grid[0].length];
        queue.add(new Entry(0,0,grid[0][0]));
        int n = grid.length;
        while(!queue.isEmpty()){
            Entry val = queue.poll();
            int x = val.x;
            int y = val.y;
            int t = val.t;
            if(x == n-1 && y == n-1){
                return t;
            }
            visited[x][y] = true;
            for(int dir [] : direction){
                int nx = x + dir[0];
                int ny = y + dir[1];

                if(isValid (nx, ny, grid.length, grid[0].length) && !visited[nx][ny]){
                    int newTime = Math.max(t,grid[nx][ny]);
                    queue.add(new Entry(nx,ny,newTime));
                }
            }
        }
        return 0;
    }
    public boolean isValid (int x, int y, int row, int col){
        return x>=0 && x<row && y>=0 && y<col;
    }
}